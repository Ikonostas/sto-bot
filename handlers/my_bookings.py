from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from utils.logger import logger
from utils.roles import registered_required
from database.database import get_db
from database.models import Agent, TOCard, Payment
from sqlalchemy import func
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CANCEL_CONFIRM = range(1)

@registered_required
async def show_my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested active bookings")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∫–æ–ª–±—ç–∫–∞ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
    query = update.callback_query
    if query:
        await query.answer()
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        agent = db.query(Agent).filter(Agent.telegram_id == user_id).first()
        if not agent:
            message_text = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
            if query:
                await query.edit_message_text(message_text)
            else:
                await update.message.reply_text(message_text)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∞–≥–µ–Ω—Ç–∞ (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending)
        active_bookings = db.query(TOCard).filter(
            TOCard.agent_id == agent.id,
            TOCard.status == "pending"
        ).order_by(TOCard.appointment_time).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        active_sum = db.query(func.sum(TOCard.total_price)).filter(
            TOCard.agent_id == agent.id,
            TOCard.status == "pending"
        ).scalar() or 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó:
        # (—Å—É–º–º–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 
        # –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è –∞–≥–µ–Ω—Ç–∞ –∏ –º–∏–Ω—É—Å —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç)
        
        # –°—É–º–º–∞ –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¢–û
        approved_sum = db.query(func.sum(TOCard.total_price)).filter(
            TOCard.agent_id == agent.id,
            TOCard.status == "approved"
        ).scalar() or 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ
        commission = approved_sum * (agent.commission_rate / 100)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        payments_sum = db.query(func.sum(Payment.amount)).filter(
            Payment.agent_id == agent.id
        ).scalar() or 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = approved_sum - commission - payments_sum
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–≥–µ–Ω—Ç–∞
        message_text = f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
        message_text += f"(–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {approved_sum:.2f} —Ä—É–±., –∫–æ–º–∏—Å—Å–∏—è: {commission:.2f} —Ä—É–±., –≤—ã–ø–ª–∞—Ç—ã: {payments_sum:.2f} —Ä—É–±.)\n\n"
        
        if not active_bookings:
            message_text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¢–û."
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            message_text += f"üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ({len(active_bookings)}):\n"
            message_text += f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {active_sum:.2f} —Ä—É–±.\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard = []
            
            for i, booking in enumerate(active_bookings, 1):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                appointment_time = booking.appointment_time.strftime("%d.%m.%Y %H:%M")
                
                message_text += (
                    f"{i}. –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{booking.card_number}\n"
                    f"   üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {appointment_time}\n"
                    f"   üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {booking.category}\n"
                    f"   üè¢ –°–¢–û: {booking.sto_name}\n"
                    f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.total_price:.2f} —Ä—É–±.\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–µ
                keyboard.append([
                    InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞—Ä—Ç–æ—á–∫–µ ‚Ññ{booking.card_number}", callback_data=f"view_card_{booking.id}")
                ])
            
            keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–≤–µ—á–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–∑–æ–≤–∞
        if query:
            await query.edit_message_text(message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
            
    finally:
        db.close()

@registered_required
async def view_card_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–û"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    card_id = int(query.data.split("_")[2])
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¢–û
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        if not card:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")
                ]])
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        appointment_time = card.appointment_time.strftime("%d.%m.%Y %H:%M")
        created_at = card.created_at.strftime("%d.%m.%Y %H:%M")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
        message_text = (
            f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number}\n\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {appointment_time}\n"
            f"üìÜ –°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
            f"üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card.category}\n"
            f"üè¢ –°–¢–û: {card.sto_name}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {card.total_price:.2f} —Ä—É–±.\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {card.client_name}\n"
            f"üöò –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {card.car_number}\n"
            f"üî¢ VIN: {card.vin_number}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {card.client_phone}\n\n"
        )
        
        if card.has_defects:
            message_text += f"üîß –î–µ—Ñ–µ–∫—Ç—ã: {card.defect_type}\n"
            if card.defect_description:
                message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {card.defect_description}\n\n"
        else:
            message_text += "‚úÖ –î–µ—Ñ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n"
        
        message_text += f"üîÑ –°—Ç–∞—Ç—É—Å: {get_status_text(card.status)}\n"
        
        if card.status == "rejected" and card.admin_comment:
            message_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {card.admin_comment}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏, –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ pending, –¥–ª—è –æ—Ç–º–µ–Ω—ã
        keyboard = []
        
        if card.status == "pending":
            keyboard.append([
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_card_{card.id}")
            ])
        
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")])
        keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup
        )
        
    finally:
        db.close()

@registered_required
async def start_cancel_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    card_id = int(query.data.split("_")[2])
    context.user_data["cancel_card_id"] = card_id
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¢–û
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        if not card:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")
                ]])
            )
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏
        if card.status != "pending":
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –æ—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '–û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è'.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")
                ]])
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data="confirm_cancel"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_card_{card_id}")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùó –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –¢–û ‚Ññ{card.card_number}?\n\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {card.appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card.category}\n"
            f"üè¢ –°–¢–û: {card.sto_name}\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=reply_markup
        )
        
        return CANCEL_CONFIRM
    
    except Exception as e:
        logger.error(f"Error starting cancel process: {e}")
        
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")
            ]])
        )
        
        return ConversationHandler.END
    
    finally:
        db.close()

@registered_required
async def confirm_cancel_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û"""
    query = update.callback_query
    await query.answer()
    
    if query.data != "confirm_cancel":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏
        card_id = context.user_data.get("cancel_card_id")
        if card_id:
            await view_card_details(update, context)
        else:
            await show_my_bookings(update, context)
        return ConversationHandler.END
    
    card_id = context.user_data.get("cancel_card_id")
    if not card_id:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")
            ]])
        )
        return ConversationHandler.END
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¢–û
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        if not card:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")
                ]])
            )
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        card.status = "cancelled"
        card.admin_comment = "–û—Ç–º–µ–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–º"
        db.commit()
        
        logger.info(f"User {update.effective_user.id} cancelled TO card {card.card_number}")
        
        await query.edit_message_text(
            f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")],
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        
        return ConversationHandler.END
    
    except Exception as e:
        db.rollback()
        logger.error(f"Error cancelling TO card: {e}")
        
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º", callback_data="my_bookings")
            ]])
        )
        
        return ConversationHandler.END
    
    finally:
        db.close()

def get_status_text(status):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    status_texts = {
        "pending": "üïí –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è",
        "approved": "‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ"
    }
    return status_texts.get(status, status)

def get_booking_cancel_handler():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_cancel_card, pattern=r'^cancel_card_\d+$')
        ],
        states={
            CANCEL_CONFIRM: [
                CallbackQueryHandler(confirm_cancel_card, pattern=r'^confirm_cancel$|^view_card_\d+$')
            ]
        },
        fallbacks=[],
        name="booking_cancel_handler"
    ) 