from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database.db import SessionLocal
from database.models import User, Station, Appointment
from config import CHOOSING

async def manage_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
    
    if not user.is_manager:
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏."
        )
        db.close()
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
    current_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    appointments = db.query(Appointment).filter(
        Appointment.appointment_time >= current_date
    ).order_by(Appointment.appointment_time).all()
    
    if not appointments:
        await query.edit_message_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
        db.close()
        return CHOOSING
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    message_text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    keyboard = []
    
    for appointment in appointments:
        station = db.query(Station).filter(Station.id == appointment.station_id).first()
        message_text += (
            f"üìÖ {appointment.appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üè¢ –°—Ç–∞–Ω—Ü–∏—è: {station.name}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {appointment.client_name}\n"
            f"üöó –ù–æ–º–µ—Ä: {appointment.car_number}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {appointment.client_phone}\n\n"
        )
        keyboard.append([
            InlineKeyboardButton(
                f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å {appointment.appointment_time.strftime('%d.%m.%Y %H:%M')}",
                callback_data=f'cancel_{appointment.id}'
            )
        ])
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')])
    
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    db.close()
    return CHOOSING

async def cancel_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    await query.answer()
    
    appointment_id = int(query.data.split('_')[1])
    
    db = SessionLocal()
    appointment = db.query(Appointment).filter(Appointment.id == appointment_id).first()
    
    if appointment:
        db.delete(appointment)
        db.commit()
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
    else:
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
    
    db.close()
    return CHOOSING 