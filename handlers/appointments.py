from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy import and_
from database.db import SessionLocal
from database.models import User, Station, Appointment
from utils.time_slots import get_available_dates, get_available_time_slots
from config import (CHOOSING, ENTER_CLIENT_NAME, ENTER_CAR_NUMBER, 
                   ENTER_PHONE, CHOOSE_STATION, CHOOSE_DATE, CHOOSE_TIME)

async def new_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
    
    if not user.is_registered:
        await query.edit_message_text(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return ConversationHandler.END
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    return ENTER_CLIENT_NAME

async def enter_client_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['client_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    return ENTER_CAR_NUMBER

async def enter_car_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['car_number'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    return ENTER_PHONE

async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    
    db = SessionLocal()
    stations = db.query(Station).all()
    keyboard = [[InlineKeyboardButton(station.name, callback_data=f'station_{station.id}')] 
                for station in stations]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –¢–û:", reply_markup=reply_markup)
    db.close()
    return CHOOSE_STATION

async def choose_station(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    station_id = int(query.data.split('_')[1])
    context.user_data['station_id'] = station_id
    
    dates = get_available_dates()
    keyboard = [[InlineKeyboardButton(date.strftime("%d.%m.%Y"), 
                                    callback_data=f'date_{date.strftime("%Y-%m-%d")}')] 
                for date in dates]
    keyboard.append([InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)
    return CHOOSE_DATE

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_date = query.data.split('_')[1]
    context.user_data['date'] = selected_date
    
    db = SessionLocal()
    station_id = context.user_data.get('station_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
    station = db.query(Station).filter(Station.id == station_id).first()
    if not station:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        db.close()
        return CHOOSING
    
    selected_date_obj = datetime.strptime(selected_date, "%Y-%m-%d").date()
    time_slots = get_available_time_slots(db, station_id, selected_date_obj)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    for time_str, is_available in time_slots:
        if is_available:
            keyboard.append([InlineKeyboardButton(time_str, callback_data=f'time_{time_str}')])
        else:
            keyboard.append([InlineKeyboardButton(f"‚ùå {time_str} (–∑–∞–Ω—è—Ç–æ)", callback_data='unavailable')])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data='back_to_date')])
    keyboard.append([InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é {station.name}\n"
        f"–î–∞—Ç–∞: {selected_date_obj.strftime('%d.%m.%Y')}\n"
        f"(–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–º–µ—á–µ–Ω–æ ‚ùå):", 
        reply_markup=reply_markup
    )
    db.close()
    return CHOOSE_TIME

async def handle_unavailable_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.", show_alert=True)
    return CHOOSE_TIME

async def save_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'unavailable':
        await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.", show_alert=True)
        return CHOOSE_TIME
    
    if query.data == 'back_to_date':
        return await choose_station(update, context)
    
    selected_time = query.data.split('_')[1]
    date_str = context.user_data.get('date')
    
    if not date_str:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        return CHOOSING
    
    time_obj = datetime.strptime(f"{date_str} {selected_time}", "%Y-%m-%d %H:%M")
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        station_id = context.user_data.get('station_id')
        station = db.query(Station).filter(Station.id == station_id).first()
        if not station:
            raise ValueError("–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if time_obj < datetime.now():
            raise ValueError("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ")
        
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        new_appointment = Appointment(
            station_id=station_id,
            user_id=user.id,
            car_number=context.user_data['car_number'],
            client_name=context.user_data['client_name'],
            client_phone=context.user_data['phone'],
            appointment_time=time_obj
        )
        
        db.add(new_appointment)
        db.commit()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
        context.user_data.clear()
        
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üè¢ –°—Ç–∞–Ω—Ü–∏—è: {station.name}\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {time_obj.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {new_appointment.client_name}\n"
            f"üöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {new_appointment.car_number}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {new_appointment.client_phone}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        
    except Exception as e:
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
    finally:
        db.close()
    
    return CHOOSING

async def my_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
    appointments = db.query(Appointment).filter(
        and_(
            Appointment.user_id == user.id,
            Appointment.appointment_time >= datetime.now()
        )
    ).order_by(Appointment.appointment_time).all()
    
    keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
    
    if not appointments:
        await query.edit_message_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        db.close()
        return CHOOSING
    
    message = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for app in appointments:
        station = db.query(Station).filter(Station.id == app.station_id).first()
        message += f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {app.appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"üè¢ –°—Ç–∞–Ω—Ü–∏—è: {station.name}\n"
        message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {app.client_name}\n"
        message += f"üöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {app.car_number}\n"
        message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app.client_phone}\n"
        message += "-------------------\n"
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    db.close()
    return CHOOSING 