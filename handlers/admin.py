from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from utils.logger import logger
from utils.roles import admin_required
from database.database import get_db
from database.models import Agent, TOCard, Payment
from handlers.user_handler import get_all_agents, update_agent_commission
from sqlalchemy import func
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    ADMIN_ACTION, 
    SELECT_AGENT, 
    AGENT_INFO, 
    AGENT_ARCHIVE, 
    AGENT_ACTION,
    PAYMENT_AMOUNT, PAYMENT_COMMENT,
    EDIT_CARD, EDIT_CARD_SELECT_FIELD,
    CHANGE_COMMISSION
) = range(10)

@admin_required
async def admin_agents_list(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤"""
    query = update.callback_query
    if query:
        await query.answer()
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        agents = get_all_agents(db, limit=30, skip=page * 30)
        total_agents = db.query(func.count(Agent.id)).scalar()
        
        keyboard = []
        for agent in agents:
            keyboard.append([
                InlineKeyboardButton(
                    f"{agent.full_name} ({agent.company})",
                    callback_data=f"agent_{agent.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        navigation = []
        if page > 0:
            navigation.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"agents_page_{page-1}")
            )
        
        if (page + 1) * 30 < total_agents:
            navigation.append(
                InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"agents_page_{page+1}")
            )
        
        if navigation:
            keyboard.append(navigation)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        keyboard.append([
            InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–≤–µ—á–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if query:
            await query.edit_message_text(
                "–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤:",
                reply_markup=reply_markup
            )
        
        return SELECT_AGENT
    finally:
        db.close()

@admin_required
async def agent_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–≥–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    agent_id = int(query.data.split("_")[1])
    context.user_data["selected_agent_id"] = agent_id
    
    db = next(get_db())
    try:
        agent = db.query(Agent).filter(Agent.id == agent_id).first()
        if not agent:
            await query.edit_message_text(
                "–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
                ]])
            )
            return SELECT_AGENT
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("Info", callback_data=f"agent_info_{agent_id}"),
                InlineKeyboardButton("Archive", callback_data=f"agent_archive_{agent_id}"),
                InlineKeyboardButton("Action", callback_data=f"agent_action_{agent_id}")
            ],
            [
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.full_name}:",
            reply_markup=reply_markup
        )
        
        return ADMIN_ACTION
    finally:
        db.close()

@admin_required
async def agent_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    agent_id = int(query.data.split("_")[2])
    
    db = next(get_db())
    try:
        agent = db.query(Agent).filter(Agent.id == agent_id).first()
        if not agent:
            await query.edit_message_text(
                "–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
                ]])
            )
            return SELECT_AGENT
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¢–û
        approved_to = db.query(func.count(TOCard.id)).filter(
            TOCard.agent_id == agent_id,
            TOCard.status == "approved"
        ).scalar()
        
        rejected_to = db.query(func.count(TOCard.id)).filter(
            TOCard.agent_id == agent_id,
            TOCard.status == "rejected"
        ).scalar()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¢–û
        approved_sum = db.query(func.sum(TOCard.total_price)).filter(
            TOCard.agent_id == agent_id,
            TOCard.status == "approved"
        ).scalar() or 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ
        commission = approved_sum * (agent.commission_rate / 100)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        payments_sum = db.query(func.sum(Payment.amount)).filter(
            Payment.agent_id == agent_id
        ).scalar() or 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        info_text = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–≥–µ–Ω—Ç–µ\n\n"
            f"üë§ –§–ò–û: {agent.full_name}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {agent.company}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {agent.phone}\n"
            f"üîó –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: {agent.messenger_link or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–û:\n"
            f"‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö: {approved_to}\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {rejected_to}\n\n"
            f"üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n"
            f"üí≤ –ë–∞–ª–∞–Ω—Å: {approved_sum - commission - payments_sum:.2f} —Ä—É–±.\n"
            f"üßÆ –ö–æ–º–∏—Å—Å–∏—è: {agent.commission_rate}%\n"
            f"üíµ –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏: {commission:.2f} —Ä—É–±.\n"
            f"üí∏ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç: {payments_sum:.2f} —Ä—É–±.\n"
        )
        
        keyboard = [[
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"agent_{agent_id}")
        ]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            info_text,
            reply_markup=reply_markup
        )
        
        return AGENT_INFO
    finally:
        db.close()

@admin_required
async def agent_archive(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ –∞–≥–µ–Ω—Ç–∞ - –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    parts = query.data.split("_")
    agent_id = int(parts[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if len(parts) > 3 and parts[3] == "page":
        page = int(parts[4])
    
    db = next(get_db())
    try:
        agent = db.query(Agent).filter(Agent.id == agent_id).first()
        if not agent:
            await query.edit_message_text(
                "–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
                ]])
            )
            return SELECT_AGENT
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û –¥–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        to_cards = db.query(TOCard).filter(
            TOCard.agent_id == agent_id
        ).order_by(TOCard.created_at.desc()).limit(5).offset(page * 5).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û
        total_cards = db.query(func.count(TOCard.id)).filter(
            TOCard.agent_id == agent_id
        ).scalar()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        payments = db.query(Payment).filter(
            Payment.agent_id == agent_id
        ).order_by(Payment.created_at.desc()).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –¢–û
        message_text = f"üìã –ê—Ä—Ö–∏–≤ –∞–≥–µ–Ω—Ç–∞: {agent.full_name}\n\n"
        
        if to_cards:
            message_text += f"üöó –ö–∞—Ä—Ç–æ—á–∫–∏ –¢–û (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(total_cards - 1) // 5 + 1}):\n\n"
            
            for card in to_cards:
                appointment_time = card.appointment_time.strftime("%d.%m.%Y %H:%M")
                created_at = card.created_at.strftime("%d.%m.%Y %H:%M")
                
                status_text = {
                    "pending": "üïí –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è",
                    "approved": "‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ",
                    "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                    "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ"
                }.get(card.status, card.status)
                
                message_text += (
                    f"–ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number}\n"
                    f"–°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card.category}\n"
                    f"–°–¢–û: {card.sto_name}\n"
                    f"–ó–∞–ø–∏—Å—å –Ω–∞: {appointment_time}\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {card.client_name}\n"
                    f"–ù–æ–º–µ—Ä –∞–≤—Ç–æ: {card.car_number}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {card.total_price:.2f} —Ä—É–±.\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                )
                
                if card.status == "rejected" and card.admin_comment:
                    message_text += f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {card.admin_comment}\n"
                
                message_text += "\n---\n\n"
        else:
            message_text += "–£ –∞–≥–µ–Ω—Ç–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û.\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        if payments:
            message_text += "üí∞ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—á–µ—Ç–∞:\n\n"
            
            for payment in payments:
                created_at = payment.created_at.strftime("%d.%m.%Y %H:%M")
                sign = "+" if payment.amount >= 0 else ""
                
                message_text += (
                    f"–î–∞—Ç–∞: {created_at}\n"
                    f"–°—É–º–º–∞: {sign}{payment.amount:.2f} —Ä—É–±.\n"
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {payment.comment}\n\n"
                )
        else:
            message_text += "–£ –∞–≥–µ–Ω—Ç–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞—Å—á–µ—Ç–∞.\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û
        if total_cards > 5:
            pagination = []
            if page > 0:
                pagination.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"agent_archive_{agent_id}_page_{page-1}")
                )
            
            if (page + 1) * 5 < total_cards:
                pagination.append(
                    InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"agent_archive_{agent_id}_page_{page+1}")
                )
            
            if pagination:
                keyboard.append(pagination)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"agent_{agent_id}")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup
        )
        
        return AGENT_ARCHIVE
    finally:
        db.close()

@admin_required
async def agent_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–≥–µ–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    agent_id = int(query.data.split("_")[2])
    context.user_data["selected_agent_id"] = agent_id
    
    db = next(get_db())
    try:
        agent = db.query(Agent).filter(Agent.id == agent_id).first()
        if not agent:
            await query.edit_message_text(
                "–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
                ]])
            )
            return SELECT_AGENT
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞—Å—á–µ—Ç–∞", callback_data=f"add_payment_{agent_id}")
            ],
            [
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¢–û", callback_data=f"edit_to_card_{agent_id}")
            ],
            [
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é", callback_data=f"change_commission_{agent_id}")
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"agent_{agent_id}")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.full_name}:",
            reply_markup=reply_markup
        )
        
        return AGENT_ACTION
    finally:
        db.close()

@admin_required
async def start_add_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    agent_id = int(query.data.split("_")[2])
    context.user_data["payment_agent_id"] = agent_id
    
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '-' –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ä—É–±–ª–µ–π –∏ –∫–æ–ø–µ–µ–∫.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 1000, -500, 1500,50, -750,25"
    )
    
    return PAYMENT_AMOUNT

@admin_required
async def process_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        amount_text = update.message.text.replace(',', '.')
        amount = float(amount_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["payment_amount"] = amount
        
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±.:"
        )
        
        return PAYMENT_COMMENT
    
    except ValueError:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 1000, -500, 1500,50, -750,25"
        )
        
        return PAYMENT_AMOUNT

@admin_required
async def process_payment_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    comment = update.message.text
    agent_id = context.user_data.get("payment_agent_id")
    amount = context.user_data.get("payment_amount")
    
    if not agent_id or amount is None:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = db.query(Agent).filter(Agent.id == agent_id).first()
        if not agent:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
                ]])
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        payment = Payment(
            agent_id=agent_id,
            amount=amount,
            comment=comment
        )
        
        db.add(payment)
        db.commit()
        
        logger.info(f"Admin {update.effective_user.id} added payment of {amount} to agent {agent_id} with comment: {comment}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        approved_sum = db.query(func.sum(TOCard.total_price)).filter(
            TOCard.agent_id == agent_id,
            TOCard.status == "approved"
        ).scalar() or 0
        
        commission = approved_sum * (agent.commission_rate / 100)
        
        payments_sum = db.query(func.sum(Payment.amount)).filter(
            Payment.agent_id == agent_id
        ).scalar() or 0
        
        balance = approved_sum - commission - payments_sum
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        sign = "+" if amount >= 0 else ""
        keyboard = [[
            InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∞–≥–µ–Ω—Ç–æ–º", callback_data=f"agent_action_{agent_id}")
        ]]
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–ê–≥–µ–Ω—Ç: {agent.full_name}\n"
            f"–°—É–º–º–∞: {sign}{amount:.2f} —Ä—É–±.\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–≥–µ–Ω—Ç–∞: {balance:.2f} —Ä—É–±.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return AGENT_ACTION
    
    except Exception as e:
        db.rollback()
        logger.error(f"Error adding payment: {e}")
        
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∞–≥–µ–Ω—Ç–æ–º", callback_data=f"agent_action_{agent_id}")
            ]])
        )
        
        return AGENT_ACTION
    
    finally:
        db.close()

@admin_required
async def start_change_commission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    agent_id = int(query.data.split("_")[2])
    context.user_data["commission_agent_id"] = agent_id
    
    db = next(get_db())
    try:
        agent = db.query(Agent).filter(Agent.id == agent_id).first()
        if not agent:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
                ]])
            )
            return ConversationHandler.END
        
        await query.edit_message_text(
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.full_name}: {agent.commission_rate}%\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—è—Ç—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π).\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 10, 15,5, 20"
        )
        
        return CHANGE_COMMISSION
    finally:
        db.close()

@admin_required
async def process_change_commission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –∏ –µ—ë –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        commission_text = update.message.text.replace(',', '.')
        new_commission = float(commission_text)
        
        if new_commission < 0:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞! –ö–æ–º–∏—Å—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            )
            return CHANGE_COMMISSION
        
        agent_id = context.user_data.get("commission_agent_id")
        
        if not agent_id:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∞–≥–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
            )
            return ConversationHandler.END
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = db.query(Agent).filter(Agent.id == agent_id).first()
            if not agent:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
                    ]])
                )
                return ConversationHandler.END
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            old_commission = agent.commission_rate
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é
            update_agent_commission(db, agent_id, new_commission)
            
            logger.info(f"Admin {update.effective_user.id} changed commission for agent {agent_id} from {old_commission}% to {new_commission}%")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
            approved_sum = db.query(func.sum(TOCard.total_price)).filter(
                TOCard.agent_id == agent_id,
                TOCard.status == "approved"
            ).scalar() or 0
            
            commission = approved_sum * (new_commission / 100)
            
            payments_sum = db.query(func.sum(Payment.amount)).filter(
                Payment.agent_id == agent_id
            ).scalar() or 0
            
            balance = approved_sum - commission - payments_sum
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏
            keyboard = [[
                InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∞–≥–µ–Ω—Ç–æ–º", callback_data=f"agent_action_{agent_id}")
            ]]
            
            await update.message.reply_text(
                f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
                f"–ê–≥–µ–Ω—Ç: {agent.full_name}\n"
                f"–°—Ç–∞—Ä–∞—è –∫–æ–º–∏—Å—Å–∏—è: {old_commission}%\n"
                f"–ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: {new_commission}%\n\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–≥–µ–Ω—Ç–∞: {balance:.2f} —Ä—É–±.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return AGENT_ACTION
        
        except Exception as e:
            db.rollback()
            logger.error(f"Error changing commission: {e}")
            
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∞–≥–µ–Ω—Ç–æ–º", callback_data=f"agent_action_{agent_id}")
                ]])
            )
            
            return AGENT_ACTION
        
        finally:
            db.close()
    
    except ValueError:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 10, 15,5, 20"
        )
        
        return CHANGE_COMMISSION

@admin_required
async def start_edit_to_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û"""
    query = update.callback_query
    await query.answer()
    
    agent_id = int(query.data.split("_")[3])
    context.user_data["edit_agent_id"] = agent_id
    
    db = next(get_db())
    try:
        agent = db.query(Agent).filter(Agent.id == agent_id).first()
        if not agent:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_agents_list")
                ]])
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û –¥–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        to_cards = db.query(TOCard).filter(
            TOCard.agent_id == agent_id
        ).order_by(TOCard.created_at.desc()).all()
        
        if not to_cards:
            await query.edit_message_text(
                f"–£ –∞–≥–µ–Ω—Ç–∞ {agent.full_name} –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"agent_action_{agent_id}")
                ]])
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¢–û
        keyboard = []
        for card in to_cards:
            appointment_time = card.appointment_time.strftime("%d.%m.%Y %H:%M")
            status_text = {
                "pending": "üïí", "approved": "‚úÖ", "rejected": "‚ùå", "cancelled": "üö´"
            }.get(card.status, "")
            
            keyboard.append([
                InlineKeyboardButton(
                    f"{status_text} –ö–∞—Ä—Ç–æ—á–∫–∞ ‚Ññ{card.card_number} ({appointment_time})", 
                    callback_data=f"edit_card_{card.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"agent_action_{agent_id}")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¢–û –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∞–≥–µ–Ω—Ç: {agent.full_name}):",
            reply_markup=reply_markup
        )
        
        return EDIT_CARD
    finally:
        db.close()

@admin_required
async def select_to_card_for_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    card_id = int(query.data.split("_")[2])
    context.user_data["edit_card_id"] = card_id
    
    db = next(get_db())
    try:
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        if not card:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"agent_action_{context.user_data.get('edit_agent_id')}")
                ]])
            )
            return ConversationHandler.END
        
        agent = db.query(Agent).filter(Agent.id == card.agent_id).first()
        agent_name = agent.full_name if agent else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        appointment_time = card.appointment_time.strftime("%d.%m.%Y %H:%M")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–æ—á–∫–µ
        message_text = (
            f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number}\n\n"
            f"üë§ –ê–≥–µ–Ω—Ç: {agent_name}\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {appointment_time}\n"
            f"üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card.category}\n"
            f"üè¢ –°–¢–û: {card.sto_name}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {card.total_price:.2f} —Ä—É–±.\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {card.client_name}\n"
            f"üöò –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {card.car_number}\n"
            f"üî¢ VIN: {card.vin_number}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {card.client_phone}\n\n"
        )
        
        if card.has_defects:
            message_text += f"üîß –î–µ—Ñ–µ–∫—Ç—ã: {card.defect_type}\n"
            message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {card.defect_description}\n\n"
        else:
            message_text += "‚úÖ –î–µ—Ñ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n"
        
        message_text += f"üîÑ –°—Ç–∞—Ç—É—Å: {get_status_text(card.status)}\n"
        
        if card.admin_comment:
            message_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {card.admin_comment}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data="edit_field_appointment_time")],
            [InlineKeyboardButton("üöó –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="edit_field_category")],
            [InlineKeyboardButton("üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –°–¢–û", callback_data="edit_field_sto_name")],
            [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_field_total_price")],
            [InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="edit_field_client_name")],
            [InlineKeyboardButton("üöò –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ", callback_data="edit_field_car_number")],
            [InlineKeyboardButton("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å VIN", callback_data="edit_field_vin_number")],
            [InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field_client_phone")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
        if card.status != "cancelled":
            keyboard.append([InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="edit_field_status")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö
        if card.has_defects:
            keyboard.append([InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö", callback_data="edit_field_defects")])
        else:
            keyboard.append([InlineKeyboardButton("üîß –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã", callback_data="edit_field_add_defects")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard.append([InlineKeyboardButton("üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="edit_field_admin_comment")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"agent_action_{card.agent_id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        return EDIT_CARD_SELECT_FIELD
    finally:
        db.close()

def get_status_text(status):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    status_texts = {
        "pending": "üïí –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è",
        "approved": "‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ"
    }
    return status_texts.get(status, status) 