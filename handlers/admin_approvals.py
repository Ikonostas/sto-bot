from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    ConversationHandler, 
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from utils.logger import logger
from utils.roles import admin_required
from database.database import get_db
from database.models import Agent, TOCard
from datetime import datetime
from sqlalchemy.orm import Session

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
APPROVE_REJECT, REJECT_REASON = range(2)
WAITING_DECLINE_REASON = 3

@admin_required
async def show_pending_approvals(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¢–û"""
    user_id = update.effective_user.id
    logger.info(f"Admin {user_id} requested pending approvals")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∫–æ–ª–±—ç–∫–∞ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
    query = update.callback_query
    if query:
        await query.answer()
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
        pending_cards = db.query(TOCard).filter(
            TOCard.status == "pending"
        ).order_by(TOCard.created_at).limit(5).offset(page * 5).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
        total_pending = db.query(TOCard).filter(
            TOCard.status == "pending"
        ).count()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not pending_cards:
            message_text = "–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û, –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è."
        else:
            message_text = f"üìã –ö–∞—Ä—Ç–æ—á–∫–∏ –¢–û, –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è ({page + 1}/{(total_pending - 1) // 5 + 1}):\n\n"
            
            for i, card in enumerate(pending_cards, 1):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
                agent = db.query(Agent).filter(Agent.id == card.agent_id).first()
                agent_name = agent.full_name if agent else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                created_at = card.created_at.strftime("%d.%m.%Y %H:%M")
                appointment_time = card.appointment_time.strftime("%d.%m.%Y %H:%M")
                
                message_text += (
                    f"{i}. –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number}\n"
                    f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_at}\n"
                    f"   üë§ –ê–≥–µ–Ω—Ç: {agent_name}\n"
                    f"   üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card.category}\n"
                    f"   üè¢ –°–¢–û: {card.sto_name}\n"
                    f"   ‚è∞ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {appointment_time}\n"
                    f"   üë§ –ö–ª–∏–µ–Ω—Ç: {card.client_name}\n"
                    f"   üöò –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {card.car_number}\n"
                    f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {card.client_phone}\n"
                    f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {card.total_price} —Ä—É–±.\n"
                )
                
                if card.has_defects:
                    message_text += f"   üîß –î–µ—Ñ–µ–∫—Ç—ã: {card.defect_type}\n"
                    message_text += f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {card.defect_description}\n"
                else:
                    message_text += "   ‚úÖ –î–µ—Ñ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f"approve_card_{card.id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_card_{card.id}")
                    ]
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
                message_text += "\n" + "-" * 30 + "\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination = []
        if page > 0:
            pagination.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"approvals_page_{page-1}"))
        
        if (page + 1) * 5 < total_pending:
            pagination.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"approvals_page_{page+1}"))
        
        if pagination:
            keyboard.append(pagination)
        
        keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–≤–µ—á–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–∑–æ–≤–∞
        if query:
            await query.edit_message_text(message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
            
    finally:
        db.close()

@admin_required
async def handle_approve_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    card_id = int(query.data.split("_")[2])
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¢–û
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        if not card:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è–º", callback_data="admin_approve")
                ]])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏
        card.status = "approved"
        db.commit()
        
        logger.info(f"Admin {update.effective_user.id} approved TO card {card.card_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        agent = db.query(Agent).filter(Agent.id == card.agent_id).first()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É
        
        await query.edit_message_text(
            f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞!\n\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ:\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {card.appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ –ê–≥–µ–Ω—Ç: {agent.full_name if agent else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç'}\n"
            f"üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card.category}\n"
            f"üè¢ –°–¢–û: {card.sto_name}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {card.total_price} —Ä—É–±.\n\n"
            f"–ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è–º", callback_data="admin_approve")
            ]])
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"Error approving TO card: {e}")
        
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è–º", callback_data="admin_approve")
            ]])
        )
    
    finally:
        db.close()

@admin_required
async def start_reject_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    card_id = int(query.data.split("_")[2])
    context.user_data["reject_card_id"] = card_id
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¢–û
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        if not card:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è–º", callback_data="admin_approve")
                ]])
            )
            return ConversationHandler.END
        
        await query.edit_message_text(
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¢–û ‚Ññ{card.card_number}.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:"
        )
        
        return REJECT_REASON
    
    except Exception as e:
        logger.error(f"Error starting reject process: {e}")
        
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è–º", callback_data="admin_approve")
            ]])
        )
        
        return ConversationHandler.END
    
    finally:
        db.close()

@admin_required
async def process_reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    reject_reason = update.message.text
    card_id = context.user_data.get("reject_card_id")
    
    if not card_id:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¢–û
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        if not card:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è–º", callback_data="admin_approve")
                ]])
            )
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        card.status = "rejected"
        card.admin_comment = reject_reason
        db.commit()
        
        logger.info(f"Admin {update.effective_user.id} rejected TO card {card.card_number}: {reject_reason}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        agent = db.query(Agent).filter(Agent.id == card.agent_id).first()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É
        
        await update.message.reply_text(
            f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ:\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {card.appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ –ê–≥–µ–Ω—Ç: {agent.full_name if agent else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç'}\n"
            f"üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card.category}\n"
            f"üè¢ –°–¢–û: {card.sto_name}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {card.total_price} —Ä—É–±.\n\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reject_reason}\n\n"
            f"–ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è–º", callback_data="admin_approve")
            ]])
        )
        
        return ConversationHandler.END
    
    except Exception as e:
        db.rollback()
        logger.error(f"Error rejecting TO card: {e}")
        
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è–º", callback_data="admin_approve")
            ]])
        )
        
        return ConversationHandler.END
    
    finally:
        db.close()

def get_approval_handler():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_reject_card, pattern=r'^reject_card_\d+$')
        ],
        states={
            REJECT_REASON: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_reject_reason)
            ]
        },
        fallbacks=[],
        name="admin_approval_handler"
    )

async def show_approval_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    if query:
        await query.answer()
    
    page = context.user_data.get('approval_page', 1)
    per_page = 5
    
    with Session() as db:
        cards = db.query(TOCard).filter(TOCard.status == 'pending').order_by(TOCard.created_at.desc()).all()
        
        if not cards:
            message = "üì≠ –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¢–û –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if query:
                await query.edit_message_text(text=message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text=message, reply_markup=reply_markup)
            return
        
        total_pages = (len(cards) + per_page - 1) // per_page
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        current_cards = cards[start_idx:end_idx]
        
        keyboard = []
        for card in current_cards:
            agent = db.query(Agent).filter(Agent.id == card.agent_id).first()
            card_text = f"–¢–û ‚Ññ{card.card_number} | {agent.full_name}"
            keyboard.append([InlineKeyboardButton(card_text, callback_data=f"approve_card_{card.id}")])
        
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("¬´ –ü—Ä–µ–¥.", callback_data=f"approval_page_{page-1}"))
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥. ¬ª", callback_data=f"approval_page_{page+1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)
            
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"üìã –ö–∞—Ä—Ç–æ—á–∫–∏ –¢–û –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä. {page}/{total_pages}):"
        
        if query:
            await query.edit_message_text(text=message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=message, reply_markup=reply_markup)

async def show_card_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    card_id = int(query.data.split('_')[-1])
    
    with Session() as db:
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        agent = db.query(Agent).filter(Agent.id == card.agent_id).first()
        
        if not card:
            await query.edit_message_text(
                "‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_approve")]])
            )
            return
        
        message = (
            f"üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number}\n\n"
            f"üë§ –ê–≥–µ–Ω—Ç: {agent.full_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω –∞–≥–µ–Ω—Ç–∞: {agent.phone}\n"
            f"üè¢ –°–¢–û: {card.sto_name}\n"
            f"üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¢–°: {card.category}\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {card.appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {card.total_price} —Ä—É–±.\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {card.comment or '–Ω–µ—Ç'}\n"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f"confirm_card_{card_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_card_{card_id}")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_approve")]
        ]
        
        await query.edit_message_text(text=message, reply_markup=InlineKeyboardMarkup(keyboard))

async def confirm_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û"""
    query = update.callback_query
    await query.answer()
    
    card_id = int(query.data.split('_')[-1])
    
    with Session() as db:
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        agent = db.query(Agent).filter(Agent.id == card.agent_id).first()
        
        if not card:
            await query.edit_message_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        card.status = 'approved'
        card.approved_at = datetime.now()
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
        try:
            await context.bot.send_message(
                chat_id=agent.telegram_id,
                text=f"‚úÖ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number} –±—ã–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
            )
        except Exception as e:
            logger.error(f"Failed to notify agent {agent.telegram_id}: {e}")
        
        await query.edit_message_text(
            f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number} —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ö —Å–ø–∏—Å–∫—É", callback_data="admin_approve")]])
        )

async def decline_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û"""
    query = update.callback_query
    await query.answer()
    
    card_id = int(query.data.split('_')[-1])
    context.user_data['decline_card_id'] = card_id
    
    await query.edit_message_text(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="admin_approve")]])
    )
    return WAITING_DECLINE_REASON

async def process_decline_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û"""
    reason = update.message.text
    card_id = context.user_data.get('decline_card_id')
    
    with Session() as db:
        card = db.query(TOCard).filter(TOCard.id == card_id).first()
        agent = db.query(Agent).filter(Agent.id == card.agent_id).first()
        
        if not card:
            await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END
        
        card.status = 'declined'
        card.decline_reason = reason
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
        try:
            await context.bot.send_message(
                chat_id=agent.telegram_id,
                text=f"‚ùå –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        except Exception as e:
            logger.error(f"Failed to notify agent {agent.telegram_id}: {e}")
        
        await update.message.reply_text(
            f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{card.card_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ö —Å–ø–∏—Å–∫—É", callback_data="admin_approve")]])
        )
        return ConversationHandler.END

def get_approval_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"""
    return [
        CallbackQueryHandler(show_approval_list, pattern="^admin_approve$"),
        CallbackQueryHandler(show_approval_list, pattern="^approval_page_"),
        CallbackQueryHandler(show_card_details, pattern="^approve_card_"),
        CallbackQueryHandler(confirm_card, pattern="^confirm_card_"),
        CallbackQueryHandler(decline_card, pattern="^decline_card_"),
        MessageHandler(filters.TEXT & ~filters.COMMAND, process_decline_reason, WAITING_DECLINE_REASON)
    ] 