from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.logger import logger
from utils.roles import registered_required
from database.database import get_db
from database.models import Agent, TOCard, Payment
from sqlalchemy import func, or_
from datetime import datetime

@registered_required
async def show_archive(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested archive (page {page})")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∫–æ–ª–±—ç–∫–∞ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
    query = update.callback_query
    if query:
        await query.answer()
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        agent = db.query(Agent).filter(Agent.telegram_id == user_id).first()
        if not agent:
            message_text = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
            if query:
                await query.edit_message_text(message_text)
            else:
                await update.message.reply_text(message_text)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∞–≥–µ–Ω—Ç–∞ (–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ)
        archive_bookings = db.query(TOCard).filter(
            TOCard.agent_id == agent.id,
            or_(TOCard.status == "approved", TOCard.status == "rejected")
        ).order_by(TOCard.appointment_time.desc()).limit(5).offset(page * 5).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∞—Ä—Ö–∏–≤–µ
        total_archive_bookings = db.query(func.count(TOCard.id)).filter(
            TOCard.agent_id == agent.id,
            or_(TOCard.status == "approved", TOCard.status == "rejected")
        ).scalar()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        payments = db.query(Payment).filter(
            Payment.agent_id == agent.id
        ).order_by(Payment.created_at.desc()).limit(5).offset(page * 5).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üìÇ –ê—Ä—Ö–∏–≤ –∑–∞–ø–∏—Å–µ–π –∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n\n"
        
        # –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¢–û
        if not archive_bookings:
            message_text += "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¢–û.\n\n"
        else:
            message_text += "üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¢–û:\n\n"
            
            for i, booking in enumerate(archive_bookings, 1):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                appointment_time = booking.appointment_time.strftime("%d.%m.%Y %H:%M")
                status = get_status_text(booking.status)
                
                message_text += (
                    f"{i}. –ö–∞—Ä—Ç–æ—á–∫–∞ –¢–û ‚Ññ{booking.card_number}\n"
                    f"   üìÖ –î–∞—Ç–∞: {appointment_time}\n"
                    f"   üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {booking.category}\n"
                    f"   üè¢ –°–¢–û: {booking.sto_name}\n"
                    f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.total_price} —Ä—É–±.\n"
                    f"   üîÑ –°—Ç–∞—Ç—É—Å: {status}\n"
                )
                
                if booking.admin_comment:
                    message_text += f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking.admin_comment}\n"
                
                message_text += "\n"
        
        # –í—ã–≤–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂–∏
        if payments:
            message_text += "üíµ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤:\n\n"
            
            for i, payment in enumerate(payments, 1):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                payment_date = payment.created_at.strftime("%d.%m.%Y")
                amount = f"+{payment.amount}" if payment.amount > 0 else f"{payment.amount}"
                
                message_text += (
                    f"{i}. –ü–ª–∞—Ç–µ–∂ –æ—Ç {payment_date}\n"
                    f"   üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                    f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {payment.comment}\n\n"
                )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination = []
        if page > 0:
            pagination.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"archive_page_{page-1}"))
        
        if (page + 1) * 5 < total_archive_bookings:
            pagination.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"archive_page_{page+1}"))
        
        if pagination:
            keyboard.append(pagination)
        
        keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–≤–µ—á–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–∑–æ–≤–∞
        if query:
            await query.edit_message_text(message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
            
    finally:
        db.close()

def get_status_text(status):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    status_texts = {
        "pending": "üïí –û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è",
        "approved": "‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    }
    return status_texts.get(status, status) 